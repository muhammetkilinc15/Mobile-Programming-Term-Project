// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Entites.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Games"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Shoes"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entites.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EntityLayer.Entites.MessageFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageFiles");
                });

            modelBuilder.Entity("EntityLayer.Entites.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<bool>("isSold")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Price");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("Title");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Apple Iphone 12",
                            IsDeleted = false,
                            Price = 10000m,
                            PublisherId = 1,
                            SubCategoryId = 1,
                            Title = "Iphone 12",
                            Views = 25,
                            isSold = false
                        });
                });

            modelBuilder.Entity("EntityLayer.Entites.ProductImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("EntityLayer.Entites.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Seller"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entites.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Tablet"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Name = "Calculator"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Name = "Comic"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Name = "Shirt"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Name = "Pants"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            Name = "Boots"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 5,
                            Name = "Sandal"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            Name = "Slipper"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Name = "T-shirt"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entites.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adana Alparslan Türkeş Bilim Ve Teknoloji Üniversitesi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adıyaman Üniversitesi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Afyon Kocatepe Üniversitesi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ağrı İbrahim Çeçen Üniversitesi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ahi Evran Üniversitesi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Aksaray Üniversitesi"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Amasya Üniversitesi"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Anadolu Üniversitesi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ankara Hacı Bayram Veli Üniversitesi"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ankara Üniversitesi"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Ardahan Üniversitesi"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Artvin Çoruh Üniversitesi"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Atatürk Üniversitesi"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Balıkesir Üniversitesi"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Bartın Üniversitesi"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Batman Üniversitesi"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Bayburt Üniversitesi"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Bilecik Şeyh Edebali Üniversitesi"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Bingöl Üniversitesi"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Bitlis Eren Üniversitesi"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Boğaziçi Üniversitesi"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Bozok Üniversitesi"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Bülent Ecevit Üniversitesi"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Celal Bayar Üniversitesi"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Cumhuriyet Üniversitesi"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Çanakkale Onsekiz Mart Üniversitesi"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Çankırı Karatekin Üniversitesi"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Çukurova Üniversitesi"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Deniz Harp Okulu"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Dicle Üniversitesi"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Dokuz Eylül Üniversitesi"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Dumlupınar Üniversitesi"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Düzce Üniversitesi"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Ege Üniversitesi"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Erciyes Üniversitesi"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Erzincan Binali Yıldırım Üniversitesi"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Erzurum Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Eskişehir Osmangazi Üniversitesi"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Fırat Üniversitesi"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Galatasaray Üniversitesi"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Gazi Üniversitesi"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Gaziantep Üniversitesi"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Gaziosmanpaşa Üniversitesi"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Gebze Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Giresun Üniversitesi"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Gümüşhane Üniversitesi"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Hacettepe Üniversitesi"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Hakkari Üniversitesi"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Harran Üniversitesi"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Hitit Üniversitesi"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Iğdır Üniversitesi"
                        },
                        new
                        {
                            Id = 52,
                            Name = "İnönü Üniversitesi"
                        },
                        new
                        {
                            Id = 53,
                            Name = "İskenderun Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 54,
                            Name = "İstanbul Medeniyet Üniversitesi"
                        },
                        new
                        {
                            Id = 55,
                            Name = "İstanbul Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 56,
                            Name = "İstanbul Üniversitesi"
                        },
                        new
                        {
                            Id = 57,
                            Name = "İzmir Bakırçay Üniversitesi"
                        },
                        new
                        {
                            Id = 58,
                            Name = "İzmir Demokrasi Üniversitesi"
                        },
                        new
                        {
                            Id = 59,
                            Name = "İzmir Kâtip Çelebi Üniversitesi"
                        },
                        new
                        {
                            Id = 60,
                            Name = "İzmir Yüksek Teknoloji Enstitüsü"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Kafkas Üniversitesi"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Kahramanmaraş Sütçü İmam Üniversitesi"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Karabük Üniversitesi"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Karadeniz Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Karamanoğlu Mehmetbey Üniversitesi"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Kastamonu Üniversitesi"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Kırıkkale Üniversitesi"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Kırklareli Üniversitesi"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Kırşehir Ahi Evran Üniversitesi"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Kilis 7 Aralık Üniversitesi"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Kocaeli Üniversitesi"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Konya Gıda ve Tarım Üniversitesi"
                        },
                        new
                        {
                            Id = 73,
                            Name = "KTO Karatay Üniversitesi"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Maltepe Üniversitesi"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Mardin Artuklu Üniversitesi"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Marmara Üniversitesi"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Mehmet Akif Ersoy Üniversitesi"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Mersin Üniversitesi"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Mimar Sinan Güzel Sanatlar Üniversitesi"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Muğla Sıtkı Koçman Üniversitesi"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Muş Alparslan Üniversitesi"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Mustafa Kemal Üniversitesi"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Namık Kemal Üniversitesi"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Necmettin Erbakan Üniversitesi"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Nevşehir Hacı Bektaş Veli Üniversitesi"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Niğde Ömer Halisdemir Üniversitesi"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Ordu Üniversitesi"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Orta Doğu Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Osmaniye Korkut Ata Üniversitesi"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Ömer Halisdemir Üniversitesi"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Pamukkale Üniversitesi"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Polis Akademisi"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Recep Tayyip Erdoğan Üniversitesi"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Sakarya Üniversitesi"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Selçuk Üniversitesi"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Siirt Üniversitesi"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Sinop Üniversitesi"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Süleyman Demirel Üniversitesi"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Şırnak Üniversitesi"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Trakya Üniversitesi"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Tunceli Üniversitesi"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Türk-Alman Üniversitesi"
                        },
                        new
                        {
                            Id = 103,
                            Name = "Türk Hava Kurumu Üniversitesi"
                        },
                        new
                        {
                            Id = 104,
                            Name = "Türkiye Uluslararası İslam, Bilim ve Teknoloji Üniversitesi"
                        },
                        new
                        {
                            Id = 105,
                            Name = "Uşak Üniversitesi"
                        },
                        new
                        {
                            Id = 106,
                            Name = "Üsküdar Üniversitesi"
                        },
                        new
                        {
                            Id = 107,
                            Name = "Van Yüzüncü Yıl Üniversitesi"
                        },
                        new
                        {
                            Id = 108,
                            Name = "Yalova Üniversitesi"
                        },
                        new
                        {
                            Id = 109,
                            Name = "Yıldız Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Yıldırım Beyazıt Üniversitesi"
                        },
                        new
                        {
                            Id = 111,
                            Name = "Yüzüncü Yıl Üniversitesi"
                        },
                        new
                        {
                            Id = 112,
                            Name = "Zonguldak Bülent Ecevit Üniversitesi"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entites.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationCodeExpiresOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordVerificationTokenExpiresOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UniversityId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "210129049@ogr.atu.edu.tr",
                            FirstName = "Muhammet",
                            IsDeleted = false,
                            IsEmailVerified = true,
                            LastName = "Kılınç",
                            PasswordHash = "$2y$10$AHPdSk33YAaA4KAEyc9XcexFBlDY/ehwdmhvhg0snjKyXnjE9yvVC",
                            Status = "offline",
                            UniversityId = 1,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "muhammetkilinc"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet@gmail.com",
                            FirstName = "Ahmet",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            LastName = "Kılınç",
                            PasswordHash = "$2y$10$AHPdSk33YAaA4KAEyc9XcexFBlDY/ehwdmhvhg0snjKyXnjE9yvVC",
                            Status = "offline",
                            UniversityId = 12,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "ahmetkilinc"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "osmankaya@gmail.com",
                            FirstName = "Osman",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            LastName = "Kaya",
                            PasswordHash = "$2y$10$AHPdSk33YAaA4KAEyc9XcexFBlDY/ehwdmhvhg0snjKyXnjE9yvVC",
                            Status = "offline",
                            UniversityId = 4,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "osmankaya"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet@gmail.com",
                            FirstName = "Mehmet",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            LastName = "Kaya",
                            PasswordHash = "$2y$10$AHPdSk33YAaA4KAEyc9XcexFBlDY/ehwdmhvhg0snjKyXnjE9yvVC",
                            Status = "offline",
                            UniversityId = 5,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali@gmail.com",
                            FirstName = "Ali",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            LastName = "Kaya",
                            PasswordHash = "$2y$10$AHPdSk33YAaA4KAEyc9XcexFBlDY/ehwdmhvhg0snjKyXnjE9yvVC",
                            Status = "offline",
                            UniversityId = 6,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "alikaya"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "veli@gmail.com",
                            FirstName = "Veli",
                            IsDeleted = false,
                            IsEmailVerified = false,
                            LastName = "Kaya",
                            PasswordHash = "$2y$10$AHPdSk33YAaA4KAEyc9XcexFBlDY/ehwdmhvhg0snjKyXnjE9yvVC",
                            Status = "offline",
                            UniversityId = 7,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "velikaya"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entites.UserFavoriteProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavoriteProducts");
                });

            modelBuilder.Entity("EntityLayer.Entites.UserPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isProfilePhoto")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "default-profile.png",
                            UserId = 1,
                            isProfilePhoto = false
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "default-profile.png",
                            UserId = 2,
                            isProfilePhoto = false
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "default-profile.png",
                            UserId = 3,
                            isProfilePhoto = false
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "default-profile.png",
                            UserId = 4,
                            isProfilePhoto = false
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "default-profile.png",
                            UserId = 5,
                            isProfilePhoto = false
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "default-profile.png",
                            UserId = 6,
                            isProfilePhoto = false
                        });
                });

            modelBuilder.Entity("EntityLayer.Entites.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("EntityLayer.Entites.Message", b =>
                {
                    b.HasOne("EntityLayer.Entites.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entites.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EntityLayer.Entites.MessageFiles", b =>
                {
                    b.HasOne("EntityLayer.Entites.Message", "Message")
                        .WithMany("MessageFiles")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("EntityLayer.Entites.Product", b =>
                {
                    b.HasOne("EntityLayer.Entites.User", "Publisher")
                        .WithMany("Products")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entites.SubCategory", "SubCategory")
                        .WithMany("Listings")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("EntityLayer.Entites.ProductImages", b =>
                {
                    b.HasOne("EntityLayer.Entites.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Entites.SubCategory", b =>
                {
                    b.HasOne("EntityLayer.Entites.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EntityLayer.Entites.User", b =>
                {
                    b.HasOne("EntityLayer.Entites.University", "University")
                        .WithMany("Users")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("University");
                });

            modelBuilder.Entity("EntityLayer.Entites.UserFavoriteProducts", b =>
                {
                    b.HasOne("EntityLayer.Entites.Product", "Product")
                        .WithMany("UserFavoriteProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entites.User", "User")
                        .WithMany("UserFavoriteProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Entites.UserPhoto", b =>
                {
                    b.HasOne("EntityLayer.Entites.User", "User")
                        .WithMany("UserPhotos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Entites.UserRole", b =>
                {
                    b.HasOne("EntityLayer.Entites.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entites.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Entites.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("EntityLayer.Entites.Message", b =>
                {
                    b.Navigation("MessageFiles");
                });

            modelBuilder.Entity("EntityLayer.Entites.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("UserFavoriteProducts");
                });

            modelBuilder.Entity("EntityLayer.Entites.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EntityLayer.Entites.SubCategory", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("EntityLayer.Entites.University", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityLayer.Entites.User", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("UserFavoriteProducts");

                    b.Navigation("UserPhotos");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
